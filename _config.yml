defaults:
  -
     scope:
       path: ""
     values:
       layout: "default"
       supported_drivers: '[DB] is "MySQL.MySQL_Driver", "PgSQL.PgSQL_Driver", or "SQLite.SQLite_Driver"'
       supported_stmts: '[STMT] is "MySQL.MySQL_statement", "PgSQL.PgSQL_statement", or "SQLite.SQLite_statement"'

       trait_client: '<a href="trait_client.html">client traits</a>'
       f_trait_client_info: '<a href="trait_client.html">func trait_client_info</a>'
       f_trait_client_version: '<a href="trait_client.html">func trait_client_version</a>'

       trait_server: '<a href="trait_server.html">server traits</a>'
       f_trait_server_info: '<a href="trait_server.html">func trait_server_info</a>'
       f_trait_server_version: '<a href="trait_server.html">func trait_server_version</a>'

       trait_driver: '<a href="trait_driver.html">driver identification</a>'
       f_trait_driver: '<a href="trait_driver.html">func trait_driver</a>'

       trait_autocommit: '<a href="autocommit.html">autocommit settings</a>'
       f_trait_autocommit: '<a href="autocommit.html">func trait_autocommit</a>'
       p_trait_autocommit: '<a href="autocommit.html">proc set_trait_autocommit</a>'

       trait_column_case: '<a href="column_case.html">column case settings</a>'
       f_trait_column_case: '<a href="column_case.html">func trait_column_case</a>'
       p_trait_column_case: '<a href="column_case.html">proc set_trait_column_case</a>'

       trait_error_mode: '<a href="error_mode.html">error mode settings</a>'
       f_trait_error_mode: '<a href="error_mode.html">func trait_error_mode</a>'
       p_trait_error_mode: '<a href="error_mode.html">proc set_trait_error_mode</a>'

       trait_blob_size: '<a href="max_blob_size.html">BLOB size settings</a>'
       f_trait_blob_size: '<a href="max_blob_size.html">func trait_blob_size</a>'
       p_trait_blob_size: '<a href="max_blob_size.html">proc set_trait_blob_size</a>'

       trait_compressed: '<a href="trait_compressed.html">compression settings [DS]</a>'
       f_trait_compressed: '<a href="trait_compressed.html">func trait_protocol_compressed [DS]</a>'
       p_trait_compressed: '<a href="trait_compressed.html">proc set_trait_protocol_compressed [DS]</a>'

       trait_multiquery: '<a href="trait_multiquery.html">multiquery settings [DS]</a>'
       f_trait_multiquery: '<a href="trait_multiquery.html">func trait_multiquery_enabled [DS]</a>'
       p_trait_multiquery: '<a href="trait_multiquery.html">proc set_trait_multiquery_enabled [DS]</a>'

       trait_buffers: '<a href="trait_buffers.html">query buffer settings [DS]</a>'
       f_trait_buffers: '<a href="trait_buffers.html">func trait_query_buffers_used [DS]</a>'
       p_trait_buffers: '<a href="trait_buffers.html">proc set_trait_query_buffers_used [DS]</a>'

       standard_logger: '<a href="standard_logger.html">standard loggers</a>'
       p_standard_logger: '<a href="standard_logger.html">proc command_standard_logger</a>'
       p_logger_filename: '<a href="standard_logger.html">proc set_logger_filename</a>'

       custom_logger: '<a href="custom_logger.html">custom loggers</a>'
       p_attach_logger: '<a href="custom_logger.html">proc attach_custom_logger</a>'
       p_detach_logger: '<a href="custom_logger.html">proc detach_custom_logger</a>'

       query: '<a href="query.html">query</a>'
       f_query: '<a href="query.html">func query</a>'

       query_select: '<a href="query_select.html">select query</a>'
       f_query_select: '<a href="query_select.html">func query_select</a>'

       prepare: '<a href="prepare.html">prepare</a>'
       f_prepare: '<a href="prepare.html">func prepare</a>'

       prepare_select: '<a href="prepare_select.html">select prepare</a>'
       f_prepare_select: '<a href="prepare_select.html">func prepare_select</a>'

       execute: '<a href="execute.html">execute (driver)</a>'
       p_execute: '<a href="execute.html">proc execute</a>'

       rollback: '<a href="rollback.html">rollback</a>'
       p_rollback: '<a href="rollback.html">proc rollback</a>'

       commit: '<a href="commit.html">commit</a>'
       p_commit: '<a href="commit.html">proc commit</a>'

       connect: '<a href="connect.html">connect</a>'
       p_connect: '<a href="connect.html">proc basic_connect (x2)</a>'

       disconnect: '<a href="disconnect.html">disconnect</a>'
       p_disconnect: '<a href="disconnect.html">proc disconnect</a>'

       driver_msg: '<a href="last_driver_message.html">last driver message</a>'
       f_driver_msg: '<a href="last_driver_message.html">func last_driver_message</a>'

       driver_code: '<a href="last_driver_code.html">last driver code</a>'
       f_driver_code: '<a href="last_driver_code.html">func last_driver_code</a>'

       driver_state: '<a href="last_driver_state.html">last driver state</a>'
       f_driver_state: '<a href="last_driver_state.html">func last_sql_state</a>'

       last_insert_id: '<a href="last_insert_id.html">last insert id</a>'
       f_last_insert_id: '<a href="last_insert_id.html">func last_insert_id</a>'

       query_clear_table: '<a href="clear_table.html">clear table query</a>'
       p_query_clear_table: '<a href="clear_table.html">proc query_clear_table</a>'

       query_drop_table: '<a href="drop_table.html">drop table query</a>'
       p_query_drop_table: '<a href="drop_table.html">proc query_drop_table</a>'

       introduction: '<a href="introduction.html">Introduction to AdaBase</a>'

       fetch_next: '<a href="fetch_next.html">fetch next datarow</a>'
       f_fetch_next: '<a href="fetch_next.html">func fetch_next</a>'

       complete: '<a href="complete.html">fetch complete</a>'
       f_complete: '<a href="complete.html">func complete</a>'

       stmt_successful: '<a href="stmt_successful.html">stmt successful</a>'
       f_successful: '<a href="stmt_successful.html">func successful</a>'

       stmt_discards_possible: '<a href="stmt_discards_possible.html">stmt discards possible</a>'
       f_discards_possible: '<a href="stmt_discards_possible.html">func discards_possible</a>'

       stmt_rows_returned: '<a href="stmt_rows_returned.html">stmt rows returned</a>'
       f_rows_returned: '<a href="stmt_rows_returned.html">func rows_returned</a>'

       stmt_column_count: '<a href="stmt_column_count.html">stmt column count</a>'
       f_column_count: '<a href="stmt_column_count.html">func column_count</a>'

       stmt_column_table: '<a href="stmt_column_table.html">stmt column&apos;s table</a>'
       f_column_table: '<a href="stmt_column_table.html">func column_table</a>'

       stmt_column_name: '<a href="stmt_column_name.html">stmt column&apos;s name</a>'
       f_column_name: '<a href="stmt_column_name.html">func column_name</a>'

       stmt_column_native_type: '<a href="stmt_column_native_type.html">stmt column&apos;s type</a>'
       f_native_type: '<a href="stmt_column_native_type.html">func native_type</a>'

       res_column: '<a href="res_column.html">result column handler</a>'
       f_column: '<a href="res_column.html">func column (x2)</a>'

       stmt_close_cursor: '<a href="close_cursor.html">stmt close cursor</a>'
       f_close_cursor: '<a href="close_cursor.html">func close_cursor</a>'

       stmt_query: '<a href="stmt_query.html">stmt query</a>'
       f_stmt_query: '<a href="stmt_query.html">func query</a>'
