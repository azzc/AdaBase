defaults:
  -
     scope:
       path: ""
     values:
       layout: "default"
       supported_drivers: '[DB] is "MySQL.MySQL_Driver", "PostgreSQL.PostgreSQL_Driver", or "SQLite.SQLite_Driver"'
       supported_stmts: '[STMT] is "MySQL.MySQL_statement", "PostgreSQL.PostgreSQL_statement", or "SQLite.SQLite_statement"'

       trait_client: '<a href="trait_client.html">client traits</a>'
       f_trait_client_info: '<a href="trait_client.html">func trait_client_info</a>'
       f_trait_client_version: '<a href="trait_client.html">func trait_client_version</a>'

       trait_server: '<a href="trait_server.html">server traits</a>'
       f_trait_server_info: '<a href="trait_server.html">func trait_server_info</a>'
       f_trait_server_version: '<a href="trait_server.html">func trait_server_version</a>'

       trait_driver: '<a href="trait_driver.html">driver identification</a>'
       f_trait_driver: '<a href="trait_driver.html">func trait_driver</a>'

       trait_autocommit: '<a href="autocommit.html">autocommit settings</a>'
       f_trait_autocommit: '<a href="autocommit.html">func trait_autocommit</a>'
       p_trait_autocommit: '<a href="autocommit.html">proc set_trait_autocommit</a>'

       trait_column_case: '<a href="column_case.html">column case settings</a>'
       f_trait_column_case: '<a href="column_case.html">func trait_column_case</a>'
       p_trait_column_case: '<a href="column_case.html">proc set_trait_column_case</a>'

       trait_error_mode: '<a href="error_mode.html">error mode settings</a>'
       f_trait_error_mode: '<a href="error_mode.html">func trait_error_mode</a>'
       p_trait_error_mode: '<a href="error_mode.html">proc set_trait_error_mode</a>'

       trait_blob_size: '<a href="max_blob_size.html">BLOB size settings</a>'
       f_trait_blob_size: '<a href="max_blob_size.html">func trait_blob_size</a>'
       p_trait_blob_size: '<a href="max_blob_size.html">proc set_trait_blob_size</a>'

       trait_compressed: '<a href="trait_compressed.html">compression settings [DS]</a>'
       f_trait_compressed: '<a href="trait_compressed.html">func trait_protocol_compressed [DS]</a>'
       p_trait_compressed: '<a href="trait_compressed.html">proc set_trait_protocol_compressed [DS]</a>'

       trait_multiquery: '<a href="trait_multiquery.html">multiquery settings</a>'
       f_trait_multiquery: '<a href="trait_multiquery.html">func trait_multiquery_enabled</a>'
       p_trait_multiquery: '<a href="trait_multiquery.html">proc set_trait_multiquery_enabled</a>'

       trait_buffers: '<a href="trait_buffers.html">query buffer settings [DS]</a>'
       f_trait_buffers: '<a href="trait_buffers.html">func trait_query_buffers_used [DS]</a>'
       p_trait_buffers: '<a href="trait_buffers.html">proc set_trait_query_buffers_used [DS]</a>'
       
       trait_charset: '<a href="trait_character_set.html">character encoding</a>'
       f_trait_charset: '<a href="trait_multiquery.html">func trait_character_set</a>'
       p_trait_charset: '<a href="trait_multiquery.html">proc set_trait_character_set</a>'

       standard_logger: '<a href="standard_logger.html">standard loggers</a>'
       p_standard_logger: '<a href="standard_logger.html">proc command_standard_logger</a>'
       p_logger_filename: '<a href="standard_logger.html">proc set_logger_filename</a>'

       custom_logger: '<a href="custom_logger.html">custom loggers</a>'
       p_attach_logger: '<a href="custom_logger.html">proc attach_custom_logger</a>'
       p_detach_logger: '<a href="custom_logger.html">proc detach_custom_logger</a>'

       query: '<a href="query.html">query</a>'
       f_query: '<a href="query.html">func query</a>'

       query_select: '<a href="query_select.html">select query</a>'
       f_query_select: '<a href="query_select.html">func query_select</a>'

       prepare: '<a href="prepare.html">prepare</a>'
       f_prepare: '<a href="prepare.html">func prepare</a>'

       prepare_select: '<a href="prepare_select.html">prepare select</a>'
       f_prepare_select: '<a href="prepare_select.html">func prepare_select</a>'

       execute: '<a href="execute.html">execute (driver)</a>'
       p_execute: '<a href="execute.html">proc execute</a>'

       rollback: '<a href="rollback.html">rollback</a>'
       p_rollback: '<a href="rollback.html">proc rollback</a>'

       commit: '<a href="commit.html">commit</a>'
       p_commit: '<a href="commit.html">proc commit</a>'

       connect: '<a href="connect.html">connect (x2)</a>'
       p_connect: '<a href="connect.html">proc basic_connect (x2)</a>'

       disconnect: '<a href="disconnect.html">disconnect</a>'
       p_disconnect: '<a href="disconnect.html">proc disconnect</a>'

       driver_msg: '<a href="last_driver_message.html">last driver message</a>'
       f_driver_msg: '<a href="last_driver_message.html">func last_driver_message</a>'

       driver_code: '<a href="last_driver_code.html">last driver code</a>'
       f_driver_code: '<a href="last_driver_code.html">func last_driver_code</a>'

       driver_state: '<a href="last_driver_state.html">last driver state</a>'
       f_driver_state: '<a href="last_driver_state.html">func last_sql_state</a>'

       last_insert_id: '<a href="last_insert_id.html">last insert id</a>'
       f_last_insert_id: '<a href="last_insert_id.html">func last_insert_id</a>'

       query_clear_table: '<a href="clear_table.html">clear table query</a>'
       p_query_clear_table: '<a href="clear_table.html">proc query_clear_table</a>'

       query_drop_table: '<a href="drop_table.html">drop table query</a>'
       p_query_drop_table: '<a href="drop_table.html">proc query_drop_table</a>'

       introduction: '<a href="introduction.html">Introduction to AdaBase</a>'

       fetch_next: '<a href="stmt_fetch_next.html">stmt fetch next row</a>'
       f_fetch_next: '<a href="stmt_fetch_next.html">func fetch_next</a>'

       stmt_successful: '<a href="stmt_successful.html">stmt successful</a>'
       f_successful: '<a href="stmt_successful.html">func successful</a>'

       stmt_data_discarded: '<a href="stmt_data_discarded.html">stmt data discarded</a>'
       f_data_discarded: '<a href="stmt_data_discarded.html">func data_discarded</a>'

       stmt_rows_returned: '<a href="stmt_rows_returned.html">stmt rows returned</a>'
       f_rows_returned: '<a href="stmt_rows_returned.html">func rows_returned</a>'

       stmt_column_count: '<a href="stmt_column_count.html">stmt column count</a>'
       f_column_count: '<a href="stmt_column_count.html">func column_count</a>'

       stmt_column_table: '<a href="stmt_column_table.html">stmt column&apos;s table</a>'
       f_column_table: '<a href="stmt_column_table.html">func column_table</a>'

       stmt_column_name: '<a href="stmt_column_name.html">stmt column&apos;s name</a>'
       f_column_name: '<a href="stmt_column_name.html">func column_name</a>'

       stmt_column_native_type: '<a href="stmt_column_native_type.html">stmt column&apos;s type</a>'
       f_native_type: '<a href="stmt_column_native_type.html">func native_type</a>'

       res_column: '<a href="res_column.html">result column handler (x2)</a>'
       f_column: '<a href="res_column.html">func column (x2)</a>'

       stmt_discard_rest: '<a href="stmt_discard_rest.html">stmt discard rest</a>'
       p_discard_rest: '<a href="stmt_discard_rest.html">proc discard_rest</a>'

       res_count: '<a href="res_count.html">result column count</a>'
       f_res_count: '<a href="res_count.html">func count</a>'

       res_data_exhausted: '<a href="res_nodata.html">result data exhausted</a>'
       f_res_data_exhausted: '<a href="res_nodata.html">func data_exhausted</a>'

       stmt_driver_msg: '<a href="last_driver_message.html">last driver message (stmt)</a>'
       f_stmt_driver_msg: '<a href="last_driver_message.html">func last_driver_message (stmt)</a>'

       stmt_driver_code: '<a href="last_driver_code.html">last driver code (stmt)</a>'
       f_stmt_driver_code: '<a href="last_driver_code.html">func last_driver_code (stmt)</a>'

       stmt_driver_state: '<a href="last_driver_state.html">last driver state (stmt)</a>'
       f_stmt_driver_state: '<a href="last_driver_state.html">func last_sql_state (stmt)</a>'

       res_std_field: '<a href="res_std_field.html">data type conversions</a>'
       f_field_as_byte1: '<a href="res_std_field.html">func as_byte1</a>'
       f_field_as_byte2: '<a href="res_std_field.html">func as_byte2</a>'
       f_field_as_byte3: '<a href="res_std_field.html">func as_byte3</a>'
       f_field_as_byte4: '<a href="res_std_field.html">func as_byte4</a>'
       f_field_as_byte8: '<a href="res_std_field.html">func as_byte8</a>'
       f_field_as_nbyte0: '<a href="res_std_field.html">func as_nbyte0</a>'
       f_field_as_nbyte1: '<a href="res_std_field.html">func as_nbyte1</a>'
       f_field_as_nbyte2: '<a href="res_std_field.html">func as_nbyte2</a>'
       f_field_as_nbyte3: '<a href="res_std_field.html">func as_nbyte3</a>'
       f_field_as_nbyte4: '<a href="res_std_field.html">func as_nbyte4</a>'
       f_field_as_nbyte8: '<a href="res_std_field.html">func as_nbyte8</a>'
       f_field_as_real9: '<a href="res_std_field.html">func as_real9</a>'
       f_field_as_real18: '<a href="res_std_field.html">func as_real18</a>'
       f_field_as_string: '<a href="res_std_field.html">func as_string</a>'
       f_field_as_wstring: '<a href="res_std_field.html">func as_wstring</a>'
       f_field_as_wwstring: '<a href="res_std_field.html">func as_wwstring</a>'
       f_field_as_time: '<a href="res_std_field.html">func as_time</a>'
       f_field_as_chain: '<a href="res_std_field.html">func as_chain</a>'
       f_field_as_enumtype: '<a href="res_std_field.html">func as_enumtype</a>'
       f_field_as_settype: '<a href="res_std_field.html">func as_settype</a>'
       f_field_as_bits: '<a href="res_std_field.html">func as_bits</a>'
       f_field_as_utf8: '<a href="res_std_field.html">func as_utf8</a>'
       f_field_is_null: '<a href="res_std_field.html">func is_null</a>'
       f_field_native_type: '<a href="res_std_field.html">func native_type</a>'

       f_field_as_geometry: '<a href="geometry.html">func as_geometry</a>'
       geometry: '<a href="geometry.html">Spatial and Geographic Support</a>'

       res_spawn_field: '<a href="res_spawn_field.html">result spawn field</a>'
       f_spawn_field: '<a href="res_spawn_field.html">func spawn_field (x3)</a>'

       fetch_all: '<a href="stmt_fetch_all.html">stmt fetch all</a>'
       f_fetch_all: '<a href="stmt_fetch_all.html">func fetch_all</a>'

       fetch_next_set: '<a href="stmt_fetch_next_set.html">stmt fetch next set</a>'
       f_fetch_next_set: '<a href="stmt_fetch_next_set.html">proc fetch_next_set</a>'

       fetch_bound: '<a href="stmt_fetch_bound.html">stmt fetch bound</a>'
       f_fetch_bound: '<a href="stmt_fetch_bound.html">func fetch_bound</a>'

       stmt_bind: '<a href="stmt_bind.html">stmt bind (x44)</a>'
       f_bind: '<a href="stmt_bind.html">func bind (x44)</a>'

       stmt_assign: '<a href="stmt_assign.html">stmt assign (x88)</a>'
       f_assign: '<a href="stmt_assign.html">func assign (x88)</a>'

       stmt_last_insert_id: '<a href="stmt_last_insert_id.html">stmt last insert id</a>'
       f_stmt_last_insert_id: '<a href="stmt_last_insert_id.html">func last_insert_id</a>'

       stmt_execute: '<a href="stmt_execute.html">stmt execute (x2)</a>'
       f_stmt_execute: '<a href="stmt_execute.html">func execute (x2)</a>'

       stmt_iterate: '<a href="stmt_iterate.html">stmt iterate (x2)</a>'
       p_stmt_iterate: '<a href="stmt_iterate.html">proc iterate (x2)</a>'

       stmt_affected: '<a href="stmt_rows_affected.html">stmt rows affected</a>'
       f_stmt_affected: '<a href="stmt_rows_affected.html">func rows_affected</a>'

       call_proc: '<a href="call_stored_procedure.html">call_stored_procedure</a>'
       f_call_proc: '<a href="call_stored_procedure.html">func call_stored_procedure</a>'
